#!/bin/bash
#
# ------------------------------------------------------------------------------
#  Copyright (c) 2022, Guillaume ARMEDE & SciantiaDB
#  For Lengow
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
#
#  1. Redistributions of source code must retain the above copyright
#     notice, this list of conditions and the following disclaimer.
#  2. Redistributions in binary form must reproduce the above copyright
#     notice, this list of conditions and the following disclaimer in the
#     documentation and/or other materials provided with the distribution.
#
# THIS SOFTWARE IS PROVIDED BY THE AUTHORS ''AS IS'' AND ANY EXPRESS OR
# IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES
# OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED.
# IN NO EVENT SHALL THE AUTHORS OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT,
# INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
# (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
# LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
# ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
# (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
# THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
#
# ------------------------------------------------------------------------------
# Replication  functions for module native :
# ---------------------------------------------

dbtrace_sql="
CREATE SCHEMA dbtrace ;
COMMENT ON SCHEMA dbtrace IS 'Trace DDL on database cause of logical replication ';

CREATE TABLE dbtrace.trace_ddl (
classid oid ,
objid oid ,
objsubid integer ,
command_tag text,
object_type text ,
schema_name text ,
object_identity text ,
in_extension bool ,
by text ,
at timestamptz DEFAULT NOW()
) ;

CREATE OR REPLACE FUNCTION dbtrace.f_trace_ddl() RETURNS event_trigger AS \$body\$
DECLARE
l_obj record;
l_table_name character varying := '';
BEGIN
for l_obj in select * from pg_event_trigger_ddl_commands()
LOOP
/* IF command_tag */
 INSERT INTO dbtrace.trace_ddl(classid,objid,objsubid,command_tag,object_type,schema_name,object_identity,in_extension,by)
 VALUES (l_obj.classid,l_obj.objid,l_obj.objsubid,quote_ident(l_obj.command_tag),quote_ident(l_obj.object_type),quote_ident(l_obj.schema_name),quote_ident(l_obj.object_identity),l_obj.in_extension,current_user);
/* END IF command_tag */
END LOOP ;
END ;
\$body\$ LANGUAGE plpgsql ;

/* DDL END */

-- IF  :pg_server_num >= 100000
-- THEN
CREATE   EVENT TRIGGER tg_trace_ddl ON ddl_command_end
WHEN TAG IN ('CREATE TABLE','ALTER TABLE')
EXECUTE FUNCTION dbtrace.f_trace_ddl() ;
"


sql[0]="GRANT USAGE ON SCHEMA ${pub_schema} TO ${pub_user}"
sql[1]="GRANT SELECT ON ALL TABLES IN SCHEMA ${pub_schema} TO ${pub_user} "


#############   NODE SECTION ###############

function f_create_replicate_node(){
if [ -z "${concern_item}" ]; then
 f_log failed ${action_task} "An item must be indicate : all or schema.relation for publication creation "
 exit 2
fi


local check_statement="select 'exists' from pg_publication WHERE pubname = '${pub_name}'"
result=$( ${psql_pub_connexion} -c "${check_statement}" )

if [ "${result}" != "exists" ]; then

case ${concern_item} in
  all)
  local create_statement="CREATE PUBLICATION ${pub_name} FOR  ALL TABLES ${pub_with_option} "
  ;;
  *)
  local create_statement="CREATE PUBLICATION ${pub_name} FOR  TABLE ${concern_item} ${pub_with_option}"
  ;;
esac

        if [ "${isverbose}" == "true" ]; then
          f_log debug ${action_task} "Running : ${psql_pub_connexion} -c \"${create_statement}\" "
        fi

        if [ "${dryrun}" == "true" ];then
         f_log info  ${action_task} "/* Dryrun */  Create publication : ${pub_name} with for relation : ${concern_item} ${pub_with_option}"
         return_code=0
        else
            result=$( ${psql_pub_connexion} -c "${create_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
            if [ $? -eq 0 ]; then
             f_log success ${action_task} "Create publication : ${pub_name} with for relation : ${concern_item} ${pub_with_option}"
             return_code=0
            else
             f_log failed ${action_task}  "Create publication : ${pub_name} with for relation : ${concern_item} ${pub_with_option}"
             return_code=1
            fi
        fi
else
  f_log failed ${action_task} "Create publication : ${pub_name} already exists "
  return_code=1

fi

return ${return_code}
} # OK

function f_drop_replication_node(){

  local drop_statement="DROP PUBLICATION ${pub_name}"

if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${psql_pub_connexion} -c \"${drop_statement}\" "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */  Drop publication : ${pub_name}"
 return_code=0
else
  result=$( ${psql_pub_connexion} -c "${drop_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ $? -eq 0 ]; then
   f_log success ${action_task} "Drop node : ${pub_name} "
   return_code=0
  else
   f_log failed ${action_task}  "Drop node : ${pub_name}"
   return_code=1
  fi
fi
  return ${return_code}

} # OK

function f_display_replication_node(){

if [ -z "${concern_item}" ]; then
 f_log failed ${action_task} "An item must be indicate : provider or subscriber for node information "
 exit 2
fi

local monit_statement="SELECT * FROM pg_publication WHERE pubname = '${pub_name}' "

if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${psql_pub_connexion} -c \"${monit_statement}\" "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */  Display Publication : ${pub_name} informations "
 return_code=0
else
    result=$( ${psql_pub_connexion} --field-separator=";"  -c "${monit_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
    if [ $? -eq 0 ]; then
     #  f_log success ${action_task} "Display node : ${pub_name} informations "
     echo "${result}" > ${tmp_dir}/${action_task}.$$.tmp
     awk -F';' '
     BEGIN {}
     {
     printf "\n Node Informations :\n"
     printf "---------------------\n"
     printf "\t- %-20s : %s \n","pubname",$1
     printf "\t- %-20s : %s \n","pubowner",$2
     printf "\t- %-20s : %s \n","puballtables",$3
     printf "\t- %-20s : %s \n","pubinsert",$4
     printf "\t- %-20s : %s \n","pubupdate",$5
     printf "\t- %-20s : %s \n","pubdelete",$6
     printf "\t- %-20s : %s \n","pubtruncate",$7
     }
     END {printf "\n" }
      '  ${tmp_dir}/${action_task}.$$.tmp && rm ${tmp_dir}/${action_task}.$$.tmp
     return_code=0
    else
     f_log failed ${action_task}  "Display Publication : ${pub_name} informations"
     return_code=1
    fi

fi
return ${return_code}
} # OK

#############  END NODE  SECTION ###############


#############   STRUCTURE SECTION  ###############

function f_crate_strucutre_on_subscriber(){

local provider_dsn
local subscriber_dsn

case ${method_name} in
direct)

pgdump_pub_connexion="pg_dump  --port=${pub_port} --host=${pub_host} --username=${pub_user} --dbname=${pub_dbname} --format=plain --schema-only --verbose "
subscriber_dsn="${psql_sub_connexion}"

  if [ "${concern_item}" != "all" ] && [ ! -z "${concern_item}" ] ;  then
  to_dump=" -t ${concern_item}"
  elif [ "${concern_item}" == "all" ]; then
  to_dump=" -n ${pub_schema} "
  else
  f_log warning ${action_task} "Error case"
  exit 2
  fi

if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${pgdump_pub_connexion} ${to_dump} | ${subscriber_dsn} "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */  Create structure for ${concern_item} relation ${method_name} "
 return_code=0
else
 result=$( ${pgdump_pub_connexion} ${to_dump} | ${subscriber_dsn} 2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ $? -eq 0 ]; then
  f_log success ${action_task} "Dump / Load On-fly  "
  return_code=0
  else
  f_log success ${action_task} "Dump / Load On-fly  "
  return_code=1
  fi
fi
;;

disk)
if [ "${concern_item}" != "all" ] && [ ! -z "${concern_item}" ] ;  then
to_dump=" -t ${concern_item}"
elif [ "${concern_item}" == "all" ]; then
to_dump=" -n ${pub_schema} "
else
f_log warning ${action_task} "Error case "
exit 2
fi

pgdump_pub_connexion="pg_dump  --port=${pub_port} --host=${pub_host} --username=${pub_user} --dbname=${pub_dbname} --format=plain --schema-only --verbose "
subscriber_dsn="${psql_sub_connexion}"
result=$( ${pgdump_pub_connexion} ${to_dump} --file=${path_to_dump}/pgspiegel_export.sql   2>> ${log_directory}/${tool}_${mainjobdate}.err )
if [ $? -eq 0 ]; then
  f_log success ${action_task} "Dump done"
else
  return_code=1
fi

if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${pgdump_pub_connexion} ${to_dump} --file=${path_to_dump}/pgspiegel_export.sql  "
fi

if [ "${dryrun}" == "true" ];then
  f_log info  ${action_task} "/* Dryrun */  Create structure for ${concern_item} relation ${method_name} "
  return_code=0
else
  result=$( ${pgdump_pub_connexion} ${to_dump} --file=${path_to_dump}/pgspiegel_export.sql   2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ $? -eq 0 ]; then
    f_log success ${action_task} "Dump On-Disk  "
    if [ "${isverbose}" == "true" ]; then
      f_log debug ${action_task} "Running :  ${subscriber_dsn}  --file=${path_to_dump}/pgspiegel_export.sql  "
    fi

    if [ "${dryrun}" == "true" ];then
      f_log info  ${action_task} "/* Dryrun */  import structure for ${concern_item} relation ${method_name} "
      return_code=0
    else
      result=$( ${subscriber_dsn}  --file=${path_to_dump}/pgspiegel_export.sql   2>> ${log_directory}/${tool}_${mainjobdate}.err )
      if [ $? -eq 0 ]; then
        f_log success ${action_task} "Dump / Load On-Disk  "
        return_code=0
      else
        f_log success ${action_task} "Dump / Load On-Disk  "
        return_code=1
      fi
    fi

  else
  f_log success ${action_task} "Dump On-Disk  "
  return_code=1
  fi
fi
;;
*)
echo " Unkown method : ${method_name}"
;;
esac

return ${return_code}

} # IN PROGRESS

#############  END STRUCTURE SECTION  ###############



#############  INTERFACE SECTION ###############
function f_create_interface_on_node(){

f_log failed ${action_task} "Interface is not availaible with native replication"
return_code=1

return ${return_code}

} # OK

function f_drop_interface_on_node(){

  f_log failed ${action_task} "Interface is not availaible with native replication"
  return_code=1

  return ${return_code}
} # OK
#############   END INTERFACE  SECTION ###############






#############   SUBSCRIPTION SECTION ###############
function f_create_subscription(){
return_code=0
result=""

local check_statement="select 'exists' from pg_subscription WHERE subname = '${sub_subscription_name}'"

result=$( ${psql_sub_connexion} -c "${check_statement}" )
if [ "${result}" != "exists" ]; then
  local create_statement="CREATE SUBSCRIPTION ${sub_subscription_name} CONNECTION 'hostaddr=${pub_host} port=${pub_port} dbname=${pub_dbname} user=${pub_user} password=${pub_user_passwd}'  PUBLICATION ${pub_name} ${sub_with_option}"

  if [ "${isverbose}" == "true" ]; then
    f_log debug ${action_task} "Running : ${psql_sub_connexion} -c \"${create_statement}\" "
  fi

  if [ "${dryrun}" == "true" ];then
   f_log info  ${action_task} "/* Dryrun */ Create subscription : ${sub_subscription_name} with provider_dsn : hostaddr=${pub_host} port=${pub_port} dbname=${pub_dbname} user=${pub_user} and publication  ${pub_name} "
   return_code=0
  else
    result=$( ${psql_sub_connexion} -c "${create_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
    if [ $? -eq 0 ]; then
     f_log success ${action_task} "Create subscription : ${sub_subscription_name} with publication_dsn : hostaddr=${pub_host} port=${pub_port} dbname=${pub_dbname} user=${pub_user} and publication ${pub_name} "
    else
     f_log failed ${action_task}  "Create subscription : ${sub_subscription_name} with publication_dsn : hostaddr=${pub_host} port=${pub_port} dbname=${pub_dbname} user=${pub_user} and publication ${pub_name} "
     ((return_code++))
    fi
  fi

  if [ ${return_code} -gt 0 ]; then
   return  ${return_code}
  fi

fi

if [ "${activate_sub}" == "true" ]; then
    local activate_statement="ALTER SUBSCRIPTION ${sub_subscription_name} ENABLE "

    if [ "${isverbose}" == "true" ]; then
      f_log debug ${action_task} "Running : ${psql_sub_connexion} -c \"${activate_statement}\"  "
    fi

    if [ "${dryrun}" == "true" ];then
     f_log info  ${action_task} "/* Dryrun */ Alter subscription : ${sub_name} enabled "
     return_code=0
    else
      result=$( ${psql_sub_connexion} -c "${activate_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
      if [ $? -eq 0 ]; then
       f_log success ${action_task} "Alter subscription : ${sub_name} enabled "
      else
       f_log failed ${action_task}  "Alter subscription : ${sub_name} enabled "
       ((return_code++))
      fi
    fi
else
  local deactivate_statement="ALTER SUBSCRIPTION ${sub_subscription_name} DISABLE "

  if [ "${isverbose}" == "true" ]; then
    f_log debug ${action_task} "Running : ${psql_sub_connexion} -c \"${deactivate_statement}\"  "
  fi

  if [ "${dryrun}" == "true" ];then
   f_log info  ${action_task} "/* Dryrun */ Alter subscription : ${sub_name} disabled "
   return_code=0
  else
    result=$( ${psql_sub_connexion} -c "${deactivate_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
    if [ $? -eq 0 ]; then
     f_log success ${action_task} "Alter subscription : ${sub_name} disabled "
    else
     f_log failed ${action_task}  "Alter subscription : ${sub_name} disabled "
     ((return_code++))
    fi
  fi

fi

return ${return_code}

} # OK

function f_drop_subscription(){

  local check_statement="SELECT case when subenabled is true then 'enabled' else 'disabled' end  FROM  pg_subscription WHERE subname = '${sub_subscription_name}'"
  result=$( ${psql_sub_connexion} -c "${check_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ "${result}" == "enabled" ]; then
    local deactivate_statement="ALTER SUBSCRIPTION ${sub_subscription_name} DISABLE "

    if [ "${isverbose}" == "true" ]; then
      f_log debug ${action_task} "Running : ${psql_sub_connexion} -c \"${deactivate_statement}\"  "
    fi

    if [ "${dryrun}" == "true" ];then
     f_log info  ${action_task} "/* Dryrun */ Alter subscription : ${sub_name} disabled "
     return_code=0
    else
      result=$( ${psql_sub_connexion} -c "${deactivate_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
      if [ $? -eq 0 ]; then
       f_log success ${action_task} "Alter subscription : ${sub_name} disabled "
      else
       f_log failed ${action_task}  "Alter subscription : ${sub_name} disabled "
       ((return_code++))
      fi
    fi
  fi
  if [ ${return_code} -gt 0 ]; then
   return  ${return_code}
  fi
local drop_statement="DROP SUBSCRIPTION ${sub_subscription_name} "
if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${psql_sub_connexion} -c \"${deactivate_statement}\"  "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */ Alter subscription : ${sub_name} disabled "
 return_code=0
else
  result=$( ${psql_sub_connexion} -c "${drop_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ $? -eq 0 ]; then
   f_log success ${action_task} "Drop subscription : ${sub_subscription_name} "
  else
   f_log failed ${action_task}  "Drop subscription : ${sub_subscription_name} "
   ((return_code++))
  fi
fi
return ${return_code}

} # OK

function f_display_subscription(){
 return_code=0
 case ${concern_item} in
   sub)
      local monit_statement[0]="SELECT * FROM  pg_subscription WHERE subname = '${sub_subscription_name}'"
      local monit_statement[1]="SELECT
        CASE WHEN srsubstate = 'r' THEN  'ready'
        WHEN srsubstate = 's' THEN 'data synchronized'
        WHEN srsubstate = 'd' THEN 'copying datas'
        WHEN srsubstate = 'i' THEN 'initializing replication'
        WHEN srsubstate = 'f' THEN 'copy done' END ,
        COUNT(srrelid) FROM pg_catalog.pg_subscription_rel  GROUP BY srsubstate"
      result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement[0]}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
      if [ $? -eq 0 ]; then
       echo "${result}" > ${tmp_dir}/${action_task}_0.$$.tmp
       awk -F';' '
       BEGIN {}
       {
       printf "\n Subscription Informations :\n"
       printf " ------------------------------\n"
       printf "\t- %-20s : %s \n","subdbid",$2
       printf "\t- %-20s : %s \n","subname",$3
       printf "\t- %-20s : %s \n","subowner",$4
       printf "\t- %-20s : %s \n","subenabled",$5
       printf "\t- %-20s : %s \n","subconninfo",$6
       printf "\t- %-20s : %s \n","subslotname",$7
       printf "\t- %-20s : %s \n","subsynccommit",$8
       printf "\t- %-20s : %s \n","subpublications",$9
       }
       END {printf "\n" }
        '  ${tmp_dir}/${action_task}_0.$$.tmp && rm ${tmp_dir}/${action_task}_0.$$.tmp
       result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement[1]}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
       echo "${result}" > ${tmp_dir}/${action_task}_1.$$.tmp
       awk -F';' '
       BEGIN {
         printf "\n Subscription Informations for all tables :\n"
         printf " --------------------------------------------\n"
         printf "%-30s\t%-5s\n","Status","Total"
       }
       {
         printf "%-30s\t%-5s\n",$1,$2
       }
       END {printf "\n" }
        ' ${tmp_dir}/${action_task}_1.$$.tmp && rm ${tmp_dir}/${action_task}_1.$$.tmp
      else
       f_log failed ${action_task}  "Display subcription : ${sub_subscription_name} informations "
       return_code=1
      fi
      ;;
     all)
         local monit_statement[0]="SELECT * FROM  pg_subscription WHERE subname = '${sub_subscription_name}'"
         local monit_statement[1]="SELECT s.subname,st.relname,
         CASE WHEN sr.srsubstate = 'r' THEN  'ready'
            WHEN sr.srsubstate = 's' THEN 'synchronized'
            WHEN sr.srsubstate = 'd' THEN 'copying datas'
            WHEN sr.srsubstate = 'i' THEN 'initialize'
            WHEN sr.srsubstate = 'f' THEN 'copy done' END
            FROM pg_subscription s JOIN pg_subscription_rel sr ON s.oid = sr.srsubid JOIN pg_stat_all_tables st ON sr.srrelid = st.relid WHERE s.subname = '${sub_subscription_name}' AND st.schemaname = '${pub_schema}' "
         result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement[0]}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
         if [ $? -eq 0 ]; then
          echo "${result}" > ${tmp_dir}/${action_task}_0.$$.tmp
          test -f ${tmp_dir}/${action_task}_0.$$.tmp && awk -F';' '
          BEGIN {}
          {
          printf "\n Subscription Informations :\n"
          printf " ------------------------------\n"
          printf "\t- %-20s : %s \n","subdbid",$2
          printf "\t- %-20s : %s \n","subname",$3
          printf "\t- %-20s : %s \n","subowner",$4
          printf "\t- %-20s : %s \n","subenabled",$5
          printf "\t- %-20s : %s \n","subconninfo",$6
          printf "\t- %-20s : %s \n","subslotname",$7
          printf "\t- %-20s : %s \n","subsynccommit",$8
          printf "\t- %-20s : %s \n","subpublications",$9
          }
          END {printf "\n" }
           '  ${tmp_dir}/${action_task}_0.$$.tmp && rm ${tmp_dir}/${action_task}_0.$$.tmp
          result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement[1]}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
          echo "${result}" > ${tmp_dir}/${action_task}_1.$$.tmp
          test -f ${tmp_dir}/${action_task}_1.$$.tmp && awk -F';'  '
             BEGIN {
               printf "\n Subscription Informations for all tables :\n"
               printf " --------------------------------------------\n"
               printf "%-30s %-30s %-10s \n","Subscription","Relation","Status"
             }
             {
               printf "%-30s %-30s %-10s \n",$1,$2,$3
             }
             END {printf "\n" }
              ' ${tmp_dir}/${action_task}_1.$$.tmp && rm ${tmp_dir}/${action_task}_1.$$.tmp
         else
          f_log failed ${action_task}  "Display subcription : ${sub_subscription_name} informations "
          return_code=1
         fi
         ;;
   "")
      local monit_statement="SELECT * FROM  pg_subscription WHERE subname = '${sub_subscription_name}'"
      result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
      if [ $? -eq 0 ]; then
       # f_log success ${action_task} "Display sub : ${sub_subscription_name} informations "
       echo "${result}" > ${tmp_dir}/${action_task}.$$.tmp
       test -f ${tmp_dir}/${action_task}.$$.tmp && awk -F';' '
       BEGIN {}
       {
       printf "\n Subscription Informations :\n"
       printf " ------------------------------\n"
       printf "\t- %-20s : %s \n","subdbid",$1
       printf "\t- %-20s : %s \n","subname",$2
       printf "\t- %-20s : %s \n","subowner",$3
       printf "\t- %-20s : %s \n","subenabled",$4
       printf "\t- %-20s : %s \n","subconninfo",$5
       printf "\t- %-20s : %s \n","subslotname",$6
       printf "\t- %-20s : %s \n","subsynccommit",$7
       printf "\t- %-20s : %s \n","subpublications",$8
       }
       END {printf "\n" }
        '  ${tmp_dir}/${action_task}.$$.tmp && rm ${tmp_dir}/${action_task}.$$.tmp
       return_code=0
      else
       f_log failed ${action_task}  "Display subcription : ${sub_subscription_name} informations "
       return_code=1
      fi
      ;;
   *)
     local monit_statement[0]="SELECT
         CASE WHEN srsubstate = 'r' THEN  'ready'
         WHEN srsubstate = 's' THEN 'synchronized'
         WHEN srsubstate = 'd' THEN 'copying datas'
         WHEN srsubstate = 'i' THEN 'initialize'
         WHEN srsubstate = 'f' THEN 'copy done' END ,
         COUNT(srrelid) FROM pg_catalog.pg_subscription_rel  GROUP BY srsubstate"

     local monit_statement[1]="SELECT s.subname,st.relname,
     CASE WHEN sr.srsubstate = 'r' THEN  'ready'
        WHEN sr.srsubstate = 's' THEN 'synchronized'
        WHEN sr.srsubstate = 'd' THEN 'copying datas'
        WHEN sr.srsubstate = 'i' THEN 'initialize'
        WHEN sr.srsubstate = 'f' THEN 'copy done' END
        FROM pg_subscription s JOIN pg_subscription_rel sr ON s.oid = sr.srsubid JOIN pg_stat_all_tables st ON sr.srrelid = st.relid WHERE s.subname = '${sub_subscription_name}' AND st.relname = '${concern_item}' AND st.schemaname = '${pub_schema}' "
      result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement[0]}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
      if [ $? -eq 0 ]; then
       # f_log success ${action_task} "Display specific sub  item : ${sub_subscription_name} ${concern_item} informations "
        echo "${result}" > ${tmp_dir}/${action_task}_0.$$.tmp
        test -f ${tmp_dir}/${action_task}_0.$$.tmp  && awk -F';' -v relation="${pub_schema}.${concern_item}" '
        BEGIN {}
        {
        printf "\n Subscription Informations for %s:\n",relation
        printf "-------------------------------------------\n"
        printf "\t- %-20s : %s \n","nspname",$1
        printf "\t- %-20s : %s \n","relname",$2
        printf "\t- %-20s : %s \n","status",$3
        }
        END {printf "\n" }
         '  ${tmp_dir}/${action_task}.$$.tmp && rm ${tmp_dir}/${action_task}.$$.tmp
      result=$( ${psql_sub_connexion} --field-separator=";" -c "${monit_statement[1]}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
      echo "${result}" > ${tmp_dir}/${action_task}_1.$$.tmp
      test -f ${tmp_dir}/${action_task}_1.$$.tmp && awk -F';' -v relation="${pub_schema}.${concern_item}"  '
         BEGIN {
           printf "\n Subscription Informations for %s :\n",relation
           printf " --------------------------------------------\n"
           printf "%-30s %-30s %-10s \n","Subscription","Relation","Status"
         }
         {
           printf "%-30s %-30s %-10s \n",$1,$2,$3
         }
         END {printf "\n" }
          ' ${tmp_dir}/${action_task}_1.$$.tmp && rm ${tmp_dir}/${action_task}_1.$$.tmp
       return_code=0
      else
       f_log failed ${action_task}  "Display specific sub  item : ${sub_subscription_name} ${concern_item} informations "
       return_code=1
      fi
      ;;
 esac
return ${return_code}
} # OK
#############  END  SUBSCRIPTION SECTION ###############




#############   REPLICA SET SECTION ###############
function f_create_replication_set(){
  f_log failed ${action_task} "Interface is not availaible with native replication"
  return_code=1

  return ${return_code}
} # OK

function f_drop_replication_set(){
  f_log failed ${action_task} "Interface is not availaible with native replication"
  return_code=1

  return ${return_code}
} # OK

function f_display_replication_set() {
  f_log failed ${action_task} "Interface is not availaible with native replication"
  return_code=1

  return ${return_code}
} # OK

#############  END  REPLICA SET SECTION ###############




#############   ITEM SECTION  ###############

function f_add_all_items(){
  f_log failed ${action_task} "Add all items  is not availaible with native replication . You must create a specific publication with all items "
  return_code=1
  return ${return_code}
} # OK

function f_add_item(){


local add_an_item_statement="ALTER PUBLICATION ${pub_name} ADD TABLE ${concern_item} "

if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${psql_pub_connexion} -c \"${add_an_item_statement}\" "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */ Add table  ${concern_item} from ${pub_schema} in publication  ${pub_name} "
 return_code=0
else
  result=$( ${psql_pub_connexion} -c "${add_an_item_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ $? -eq 0 ]; then
   f_log success ${action_task} "Add table  ${concern_item} from ${pub_schema} in publication  ${pub_name} "
   return_code=0
  else
   f_log failed ${action_task}  "Add table  ${concern_item} from ${pub_schema} in publication  ${pub_name} "
   return_code=1
  fi
fi
  return ${return_code}
} # OK

function f_drop_item(){
  local remove_an_item_statement="ALTER PUBLICATION ${pub_name} DROP TABLE ${concern_item} "

  if [ "${isverbose}" == "true" ]; then
    f_log debug ${action_task} "Running : ${psql_pub_connexion} -c \"${remove_an_item_statement}\" "
  fi

  if [ "${dryrun}" == "true" ];then
   f_log info  ${action_task} "/* Dryrun */ Drop table ${concern_item} in publication  ${pub_name} "
   return_code=0
  else
    result=$( ${psql_pub_connexion} -c "${remove_an_item_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
    if [ $? -eq 0 ]; then
     f_log success ${action_task} "Add table  ${concern_item} from ${pub_schema} in publication  ${pub_name} "
     return_code=0
    else
     f_log failed ${action_task}  "Add table  ${concern_item} from ${pub_schema} in publication  ${pub_name} "
     return_code=1
    fi
  fi
    return ${return_code}
} # OK


function f_resync_item(){

local resync_statement="ALTER SUBSCRIPTION ${sub_subscription_name}  REFRESH PUBLICATION "

if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${psql_sub_connexion} -c \"${resync_statement}\" "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */ Resynchronise subscription ${sub_subscription_name} "
 return_code=0
else
    result=$( ${psql_sub_connexion}  -c "${resync_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
    if [ $? -eq 0 ]; then
     f_log success ${action_task} "Resynchronise specified item  : ${pub_schema}.${pub_relation_name} from ${sub_subscription_name} "
     return_code=0
    else
     f_log failed ${action_task}  "Resynchronise specified item  : ${pub_schema}.${pub_relation_name} from ${sub_subscription_name} "
     return_code=1
    fi
fi
return ${return_code}
} # OK

function f_display_item_info(){
 # select pglogical.show_repset_table_info('test.test_tbl','{test_replica_set}');

if [ -z "${pub_relation_name}" ]; then
 f_log failed ${action_task} "An item must be specified"
 exit 2
fi



if [ "${isverbose}" == "true" ]; then
  f_log debug ${action_task} "Running : ${psql_pub_connexion} -c \"${monit_statement}\" "
fi

if [ "${dryrun}" == "true" ];then
 f_log info  ${action_task} "/* Dryrun */ Display specified item  : ${pub_schema}.${pub_relation_name} from  ${pub_replica_set_name} "
 return_code=0
else
    result=$( ${psql_pub_connexion} --field-separator=";" -c "${monit_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
    if [ $? -eq 0 ]; then
     #  f_log success ${action_task} "Display node : ${pub_name} informations "
     echo "${result}" > ${tmp_dir}/${action_task}.$$.tmp
     awk -F';' '
     BEGIN {}
     {
     printf "\n Table in Replication set Informations :\n"
     printf " ------------------------------------------\n"
     printf "\t- %-20s : %s \n","relid",$1
     printf "\t- %-20s : %s \n","nspname",$2
     printf "\t- %-20s : %s \n","relname",$3
     printf "\t- %-20s : %s \n","att_list",$4
     printf "\t- %-20s : %s \n","has_row_filter",$5
     }
     END {printf "\n" }
      '  ${tmp_dir}/${action_task}.$$.tmp && rm ${tmp_dir}/${action_task}.$$.tmp
     return_code=0
    else
     f_log failed ${action_task}  "Display specified item  :${pub_schema}.${pub_relation_name} from  ${pub_replica_set_name} "
     return_code=1
    fi

fi
} # OK

#############  END ITEM SECTION  ###############






function f_check_logical_parameter(){
# PostgreSQL VERSION !!!!!

  local psql_connexion
  local check_statement="select name,case when char_length(setting) >= 20 THEN substr(setting,0,17)||'...' ELSE setting END ,
   CASE WHEN name = 'wal_level' THEN
     CASE WHEN setting != 'logical' THEN ' Must be at logical ' ELSE 'OK' END
   WHEN name = 'max_worker_processes' THEN
     CASE WHEN setting::integer < 10 THEN 'KO : Upgrade max_worker_processes at least to 10 ' ELSE 'OK' END
   WHEN name = 'max_replication_slots' THEN
     CASE WHEN setting::integer < 10 THEN 'KO : Upgrade max_replication_slots at least to 10 ' ELSE 'OK' END
   WHEN name = 'max_wal_senders' THEN
     CASE WHEN setting::integer < 10 THEN 'KO : Upgrade max_wal_senders at least to 10 ' ELSE 'OK' END
   WHEN name = 'server_version_num' THEN
     CASE WHEN setting::integer < 100000 THEN 'KO : Upgrade PostgreSQL Version at least PosgreSQL 10 ' ELSE 'OK' END
  END  as commentary
    FROM pg_settings WHERE name in ('wal_level','max_worker_processes','max_replication_slots','max_wal_senders','server_version_num')"

  case ${1} in
    provider)
    psql_connexion="${psql_pub_connexion}"
    ;;
    subscriber)
    psql_connexion="${psql_sub_connexion}"
    ;;
  esac

  result=$( ${psql_connexion} --field-separator=";"  -c "${check_statement}" 2>> ${log_directory}/${tool}_${mainjobdate}.err )
  if [ $? -eq 0 ]; then
    echo "${result}" > ${tmp_dir}/${action_task}.$$.tmp
    awk -F';' -v item=${1} -v module_name=${module_name} '
    BEGIN {
      printf "\n Module : %s\n",module_name
      printf "\n Logical Replication Requierements check-up : %s \n",item
      printf " -----------------------------------------------------\n"
     printf "%-30s\t%-20s\t%-60s\n","parameter","value","commentary"
    }
    {
     printf "%-30s\t%-20s\t%-60s\n",$1,$2,$3
    }
    END {printf "\n" }
     '  ${tmp_dir}/${action_task}.$$.tmp && rm ${tmp_dir}/${action_task}.$$.tmp
  return_code=0
  else
  return_code=1
  fi

  return ${return_code}

} # OK
